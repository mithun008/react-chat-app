{"ast":null,"code":"var _jsxFileName = \"/Users/mithumal/Projects/Lifesize/react-chat-app/frontend/wsdemo/ws-sqs-chat-app/src/Chat.js\";\nimport React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage'; //const URL = 'ws://localhost:3030'\n\nconst URL = 'wss://rhyy0o6zzf.execute-api.us-west-2.amazonaws.com/Prod';\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: 'Bob',\n      messages: []\n    };\n    this.ws = new WebSocket(URL);\n\n    this.addMessage = message => this.setState(state => ({\n      messages: [message, ...state.messages]\n    }));\n\n    this.submitMessage = messageString => {\n      // on submitting the ChatInput form, send the message, add it to the list and reset the input\n      const message = {\n        name: this.state.name,\n        data: messageString\n      };\n      message.message = 'sendmessage';\n      console.log(JSON.stringify(message)); //const messageToAPI = '{\"message\":\"sendmessage\", \"data\":'+'\"'+JSON.stringify(message)+'\"}';\n      //this.ws.send(JSON.stringify(message))\n      //console.log(message);\n\n      this.ws.send(JSON.stringify(message));\n      this.addMessage(message);\n    };\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n    };\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      console.log('Message received from server :' + evt.data);\n      const msgPayload = JSON.parse(evt.data);\n      const message = {};\n      console.log('Name is ' + msgPayload.name); //const message = JSON.parse(evt.data)\n\n      message.data = msgPayload.data;\n      message.name = msgPayload.name;\n      console.log('Updated...' + JSON.stringify(message));\n      this.addMessage(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n\n      this.setState({\n        ws: new WebSocket(URL)\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, \"Name:\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: 'name',\n      placeholder: 'Enter your name...',\n      value: this.state.name,\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(ChatInput, {\n      ws: this.ws,\n      onSubmitMessage: messageString => this.submitMessage(messageString),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), this.state.messages.map((message, index) => /*#__PURE__*/React.createElement(ChatMessage, {\n      key: index,\n      message: message.data,\n      name: message.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/mithumal/Projects/Lifesize/react-chat-app/frontend/wsdemo/ws-sqs-chat-app/src/Chat.js"],"names":["React","Component","ChatInput","ChatMessage","URL","Chat","state","name","messages","ws","WebSocket","addMessage","message","setState","submitMessage","messageString","data","console","log","JSON","stringify","send","componentDidMount","onopen","onmessage","evt","msgPayload","parse","onclose","render","e","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\n\n//const URL = 'ws://localhost:3030'\nconst URL = 'wss://rhyy0o6zzf.execute-api.us-west-2.amazonaws.com/Prod'\n\nclass Chat extends Component {\n  state = {\n    name: 'Bob',\n    messages: [],\n  }\n\n  ws = new WebSocket(URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      console.log('Message received from server :' + evt.data);\n      const msgPayload = JSON.parse(evt.data);\n      const message = {};\n      console.log('Name is ' + msgPayload.name);\n\n      //const message = JSON.parse(evt.data)\n      message.data = msgPayload.data;\n      message.name = msgPayload.name;\n      console.log('Updated...' + JSON.stringify(message));\n      this.addMessage(message)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(URL),\n      })\n    }\n  }\n\n  addMessage = message =>\n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { name: this.state.name, data: messageString }\n    message.message = 'sendmessage';\n    console.log(JSON.stringify(message));\n    //const messageToAPI = '{\"message\":\"sendmessage\", \"data\":'+'\"'+JSON.stringify(message)+'\"}';\n    //this.ws.send(JSON.stringify(message))\n\n    //console.log(message);\n    this.ws.send(JSON.stringify(message))\n    this.addMessage(message)\n\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"name\">\n          Name:&nbsp;\n          <input\n            type=\"text\"\n            id={'name'}\n            placeholder={'Enter your name...'}\n            value={this.state.name}\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </label>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n        {this.state.messages.map((message, index) =>\n          <ChatMessage\n            key={index}\n            message={message.data}\n            name={message.name}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}